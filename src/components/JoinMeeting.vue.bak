<template>
  <div class="max-w-4xl mx-auto p-6">
    <h1 class="text-2xl font-bold mb-6">会議への参加</h1>

    <div v-if="error" class="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
      <p class="text-red-600">{{ error }}</p>
    </div>

    <div class="mb-6">
      <h2 class="text-lg font-semibold mb-3">参加者情報</h2>
      <div class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700">お名前</label>
          <input
            type="text"
            id="name"
            v-model="participantName"
            class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="山田 太郎"
          />
        </div>
      </div>
    </div>

    <div v-if="meeting" class="mb-6">
      <h2 class="text-lg font-semibold mb-3">会議の詳細</h2>
      <div class="bg-gray-50 p-4 rounded-lg space-y-4">
        <div v-for="(dateData, date) in meeting.dates" :key="date">
          <h3 class="font-medium text-gray-900 mb-2">{{ formatDate(date) }}</h3>
          <div class="bg-white shadow-sm rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
              <tbody class="bg-white divide-y divide-gray-200">
                <tr v-for="slot in dateData.timeSlots" :key="`${date}-${slot.start}`" class="hover:bg-gray-50">
                  <td class="px-6 py-2 whitespace-nowrap w-1/3">
                    <div class="text-sm text-gray-900">
                      {{ slot.start }} 〜 {{ slot.end }}
                    </div>
                    <div class="text-xs text-gray-500">
                      {{ getParticipantCount(date, slot) }}
                    </div>
                  </td>
                  <td class="px-6 py-2 whitespace-nowrap">
                    <div class="flex items-center justify-center space-x-4">
                      <button
                        @click="setResponse(date, slot, '○')"
                        :class="[
                          'w-8 h-8 rounded-full flex items-center justify-center border',
                          getResponse(date, slot) === '○'
                            ? 'bg-green-100 border-green-500 text-green-700'
                            : 'border-gray-300 hover:bg-gray-100'
                        ]"
                      >
                        ○
                      </button>
                      <button
                        @click="setResponse(date, slot, '△')"
                        :class="[
                          'w-8 h-8 rounded-full flex items-center justify-center border',
                          getResponse(date, slot) === '△'
                            ? 'bg-yellow-100 border-yellow-500 text-yellow-700'
                            : 'border-gray-300 hover:bg-gray-100'
                        ]"
                      >
                        △
                      </button>
                      <button
                        @click="setResponse(date, slot, '×')"
                        :class="[
                          'w-8 h-8 rounded-full flex items-center justify-center border',
                          getResponse(date, slot) === '×'
                            ? 'bg-red-100 border-red-500 text-red-700'
                            : 'border-gray-300 hover:bg-gray-100'
                        ]"
                      >
                        ×
                      </button>
                    </div>
                  </td>
                  <td class="px-6 py-2 whitespace-nowrap w-1/3" 
                    :style="getParticipantCountStyle(date, slot)"
                  >
                    <div class="text-sm text-gray-600">
                      ○：{{ getParticipantCountByResponse(date, slot, '○') }}名
                      △：{{ getParticipantCountByResponse(date, slot, '△') }}名
                      ×：{{ getParticipantCountByResponse(date, slot, '×') }}名
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- 参加者一覧 -->
          <div class="mt-4 bg-white rounded-lg p-4">
            <h4 class="text-sm font-medium text-gray-700 mb-2">回答済み参加者</h4>
            <div class="space-y-2">
              <div v-for="participant in meeting.participants" :key="participant.id" class="text-sm">
                <div class="flex items-start">
                  <div class="font-medium text-gray-900">{{ participant.name }}</div>
                  <div v-if="participant.comment" class="ml-4 text-gray-500">
                    {{ participant.comment }}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="mb-6">
      <h2 class="text-lg font-semibold mb-3">コメント</h2>
      <textarea
        v-model="comment"
        rows="3"
        class="block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        placeholder="備考やコメントがあればご記入ください"
      ></textarea>
    </div>

    <div class="flex justify-end">
      <button
        @click="handleSubmit"
        :disabled="!canSubmit"
        class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-300 disabled:cursor-not-allowed"
      >
        回答を送信する
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useMeetingStore } from '../stores/meeting';

const route = useRoute();
const router = useRouter();
const meetingStore = useMeetingStore();

const meetingId = computed(() => route.params.id);
const meeting = ref(null);
const participantName = ref('');
const comment = ref('');
const error = ref('');
const responses = ref({});

// 日付のフォーマット
const formatDate = (dateStr) => {
  const date = new Date(dateStr);
  const dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'][date.getDay()];
  return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日 (${dayOfWeek})`;
};

// 特定の時間枠の回答を取得
const getResponse = (date, slot) => {
  if (!responses.value[date]) return null;
  return responses.value[date][`${slot.start}-${slot.end}`] || null;
};

// 回答を設定
const setResponse = (date, slot, value) => {
  if (!responses.value[date]) {
    responses.value[date] = {};
  }
  responses.value[date][`${slot.start}-${slot.end}`] = value;
};

// 参加状況のカウントスタイルを取得
const getParticipantCountStyle = (date, slot) => {
  const total = meeting.value.participants.length;
  if (total === 0) return {};

  const okCount = getParticipantCountByResponse(date, slot, '○');
  const maybeCount = getParticipantCountByResponse(date, slot, '△');
  
  // ○の割合（△は0.5として計算）
  const ratio = (okCount + maybeCount * 0.5) / total;
  
  // 背景色の濃さを計算（0.1 ~ 0.3の範囲）
  const alpha = 0.1 + (ratio * 0.2);
  
  return {
    backgroundColor: `rgba(79, 70, 229, ${alpha})` // indigo-600の色
  };
};

// 参加状況のカウントを取得（特定の回答）
const getParticipantCountByResponse = (date, slot, response) => {
  return meeting.value.participants.filter(participant => {
    const participantResponse = participant.availability[date]?.[`${slot.start}-${slot.end}`];
    return participantResponse === response;
  }).length;
};

// 参加状況のカウントを取得
const getParticipantCount = (date, slot) => {
  const okCount = getParticipantCountByResponse(date, slot, '○');
  const maybeCount = getParticipantCountByResponse(date, slot, '△');
  const total = meeting.value.participants.length;
  
  if (total === 0) return '回答なし';
  return `${okCount + maybeCount}/${total}名`;
};

// 送信可能かどうか
const canSubmit = computed(() => {
  if (!participantName.value.trim()) return false;
  
  // すべての時間枠に回答があるか確認
  return Object.entries(meeting.value?.dates || {}).every(([date, dateData]) => {
    if (!responses.value[date]) return false;
    return dateData.timeSlots.every(slot => 
      getResponse(date, slot) !== null
    );
  });
});

// 回答の送信
const handleSubmit = async () => {
  if (!canSubmit.value) return;

  try {
    const participantId = await meetingStore.addParticipant(meetingId.value, {
      name: participantName.value,
      availability: responses.value,
      comment: comment.value
    });

    // 送信完了後、完了画面に遷移
    router.push({
      name: 'complete',
      params: { id: meetingId.value, participantId }
    });
  } catch (err) {
    error.value = err.message;
  }
};

// 会議データの読み込み
onMounted(() => {
  const loadedMeeting = meetingStore.getMeeting(meetingId.value);
  if (!loadedMeeting) {
    error.value = '指定された会議が見つかりません。URLを確認してください。';
    return;
  }
  meeting.value = loadedMeeting;
});
</script>
